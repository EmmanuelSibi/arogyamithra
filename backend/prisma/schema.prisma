// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  phone           String            @unique
  dailyGoals    DailyGoal[]
  foodEntries   FoodEntry[]
  bloodReports  BloodReport[]
  dietPlans     DietPlan[]
  healthTips    HealthTip[]
  healthPlans   HealthPlan[]
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())

}

model DailyGoal {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @db.Uuid
  date          DateTime    @default(now())
  calorieGoal   Int         @default(500)
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model FoodEntry {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String         @db.Uuid
  imageUrl      String?
  name          String      
  calories      Int         
  fats          Float?      
  protein       Float?      
  carbohydrates Float?     
  entryDate     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model BloodReport {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  reportUrl   String    // URL to the blood report file
  reportDate  DateTime  // The date the report was submitted
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model DietPlan {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  startDate   DateTime  // When the diet plan starts
  endDate     DateTime  // When the diet plan ends
  details     String    // Details of the diet plan, possibly stored as JSON or plain text
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model HealthTip {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tip         String    
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  applicableDate DateTime 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model HealthPlan {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String       @db.Uuid
   user        User      @relation(fields: [userId], references: [id])
  medicalAllergies   String?
  currentMedications String?
  height             String?
  weight             String?
  idealDietPlan      String?
}



